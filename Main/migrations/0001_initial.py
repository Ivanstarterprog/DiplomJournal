# Generated by Django 4.2.1 on 2023-06-03 12:15

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.IntegerField(db_index=True, verbose_name='Номер группы')),
                ('course', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)], verbose_name='Курс')),
                ('start_year', models.DateField(default=django.utils.timezone.now, verbose_name='Дата зачисления группы')),
                ('create_time', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Дата создания записи')),
                ('update_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата изменения информации')),
            ],
            options={
                'verbose_name': 'Группы',
                'verbose_name_plural': 'Группы',
            },
        ),
        migrations.CreateModel(
            name='Speciality',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(db_index=True, max_length=8, verbose_name='Код специальности')),
                ('name', models.CharField(db_index=True, max_length=70, verbose_name='Название специальности')),
                ('shortName', models.CharField(default='', max_length=30, verbose_name='Сокращённое название специальности')),
                ('years', models.PositiveIntegerField(default=3, verbose_name='Годы обучения')),
                ('mounths', models.PositiveIntegerField(default=10, verbose_name='Месяцы обучения')),
            ],
            options={
                'verbose_name': 'Специальности',
                'verbose_name_plural': 'Специальности',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=400, verbose_name='Название предмета')),
                ('shortName', models.CharField(max_length=100, verbose_name='Сокращённое название предмета')),
                ('hours', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Количество часов')),
                ('type', models.CharField(choices=[('NO', 'Предмет'), ('PR', 'Практика')], max_length=2, verbose_name='Затычка')),
            ],
            options={
                'verbose_name': 'Предмет',
                'verbose_name_plural': 'Предмет',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('third_name', models.CharField(default='', max_length=100, null=True, verbose_name='Отчество')),
                ('birthday', models.DateField(null=True, verbose_name='День Рождения')),
                ('floor', models.CharField(choices=[('MA', 'Мужской'), ('FE', 'Женский')], default=None, max_length=2, null=True, verbose_name='Пол')),
                ('role', models.CharField(choices=[('IT', 'Программист'), ('TE', 'Педагог'), ('ST', 'Студент'), ('AD', 'Администрация')], default='ST', max_length=2, null=True, verbose_name='Роль')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SubjectToTeacher',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('semestr', models.PositiveIntegerField(db_index=True, default=1, verbose_name='Семестр')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.groups', verbose_name='Группа')),
                ('subject', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.subject', verbose_name='Предмет')),
                ('teacher', models.ForeignKey(limit_choices_to=models.Q(('role', 'TE'), ('role', 'AD'), _connector='OR'), null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Педагог')),
            ],
            options={
                'verbose_name': 'Соотношение предметов и педагогов',
                'verbose_name_plural': 'Соотношение предметов и педагогов',
            },
        ),
        migrations.CreateModel(
            name='StudentToGroup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Main.groups', verbose_name='Группа')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'ST'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Студенты в группах',
                'verbose_name_plural': 'Студенты в группах',
            },
        ),
        migrations.CreateModel(
            name='SemestrInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('semestr', models.PositiveIntegerField(db_index=True, default=1, verbose_name='Семестр')),
                ('semestr_start', models.DateField(default=django.utils.timezone.now)),
                ('semestr_end', models.DateField(default=django.utils.timezone.now)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Main.groups', verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Информация о сессиях',
                'verbose_name_plural': 'Информация о сессиях',
            },
        ),
        migrations.CreateModel(
            name='SemesterMarks',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('EX', 'Экзамен'), ('ZA', 'Зачёт'), ('DZ', 'Диффиринцированный зачёт'), ('OT', 'Иные формы контроля')], default='OT', max_length=2, verbose_name='Форма аттестации')),
                ('mark', models.CharField(default='', max_length=10, verbose_name='Оценка')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Main.subjecttoteacher', verbose_name='Предмет')),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(db_index=True, default=None, null=True, verbose_name='Дата проведения занятия')),
                ('topic', models.CharField(max_length=125, null=True, verbose_name='Тема занятия')),
                ('independentTask', models.CharField(blank=True, max_length=500, null=True, verbose_name='Задание для работы в классе')),
                ('number', models.PositiveIntegerField(default=1, editable=False, verbose_name='Номер занятия')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Main.groups', verbose_name='Группа')),
                ('subject', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.subjecttoteacher', verbose_name='Предмет')),
            ],
            options={
                'verbose_name': 'Занятия',
                'verbose_name_plural': 'Занятия',
            },
        ),
        migrations.AddField(
            model_name='groups',
            name='curator',
            field=models.ForeignKey(limit_choices_to=models.Q(('role', 'TE'), ('role', 'AD'), _connector='OR'), null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='CustomUser_groups_curator', to=settings.AUTH_USER_MODEL, verbose_name='Куратор'),
        ),
        migrations.AddField(
            model_name='groups',
            name='speciality',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='Main.speciality', verbose_name='Специальность'),
        ),
        migrations.CreateModel(
            name='Marks',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('mark', models.CharField(default='', max_length=3, verbose_name='Оценка')),
                ('lesson', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.lesson', verbose_name='Занятие')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Main.studenttogroup', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Оценки',
                'verbose_name_plural': 'Оценки',
                'unique_together': {('lesson', 'student')},
            },
        ),
    ]
